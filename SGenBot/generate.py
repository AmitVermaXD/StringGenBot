from pyrogram.types import Message
from telethon import TelegramClient
from pyrogram import Client, filters
from pyrogram1 import Client as Client1
from asyncio.exceptions import TimeoutError
from telethon.sessions import StringSession
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.errors import (
    ApiIdInvalid,
    PhoneNumberInvalid,
    PhoneCodeInvalid,
    PhoneCodeExpired,
    SessionPasswordNeeded,
    PasswordHashInvalid
)
from pyrogram1.errors import (
    ApiIdInvalid as ApiIdInvalid1,
    PhoneNumberInvalid as PhoneNumberInvalid1,
    PhoneCodeInvalid as PhoneCodeInvalid1,
    PhoneCodeExpired as PhoneCodeExpired1,
    SessionPasswordNeeded as SessionPasswordNeeded1,
    PasswordHashInvalid as PasswordHashInvalid1
)
from telethon.errors import (
    ApiIdInvalidError,
    PhoneNumberInvalidError,
    PhoneCodeInvalidError,
    PhoneCodeExpiredError,
    SessionPasswordNeededError,
    PasswordHashInvalidError
)
gen_button = [
    [
        InlineKeyboardButton(text="üôÑ …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á s·¥áss…™·¥è…¥ üôÑ", callback_data="generate")
    ]
]


ty = "program v2"
from info import API_ID, API_HASH

@Client.on_message(filters.private & filters.command('loginX'))
async def batch(bot: Client, msg: Message):
    await msg.reply(f"¬ª ·¥õ Ä è…™…¥…¢ ·¥õ·¥è s·¥õ·¥Ä Ä·¥õ **·¥© è Ä·¥è…¢ Ä·¥Ä·¥ç ·¥†2** s·¥áss…™·¥è…¥ …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥è Ä...")
    user_id = msg.chat.id
    phone_number_msg = await bot.ask(identifier=(msg.chat.id, user_id, None),
    text="¬ª ·¥© ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö  è·¥è·¥ú Ä **·¥© ú·¥è…¥·¥á_…¥·¥ú·¥ç ô·¥á Ä** ·¥°…™·¥õ ú ·¥Ñ·¥è·¥ú…¥·¥õ Ä è ·¥Ñ·¥è·¥Ö·¥á “ì·¥è Ä ·¥° ú…™·¥Ñ ú  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á s·¥áss…™·¥è…¥. \n·¥áx·¥Ä·¥ç·¥© ü·¥á : `+910000000000`")
    
    phone_number = phone_number_msg.text
    await msg.reply("¬ª ·¥õ Ä è…™…¥…¢ ·¥õ·¥è s·¥á…¥·¥Ö ·¥è·¥õ·¥© ·¥Ä·¥õ ·¥õ ú·¥á …¢…™·¥†·¥á…¥ …¥·¥ú·¥ç ô·¥á Ä...")
    client = Client(name="user", api_id=API_ID, api_hash=API_HASH, in_memory=True)
    await client.connect()
    try:
        code = None
        code = await client.send_code(phone_number)
    except (PhoneNumberInvalid, PhoneNumberInvalidError, PhoneNumberInvalid1):
        await msg.reply("¬ª ·¥õ ú·¥á **·¥© ú·¥è…¥·¥á_…¥·¥ú·¥ç ô·¥á Ä**  è·¥è·¥ú'·¥†·¥á s·¥á…¥·¥õ ·¥Ö·¥è·¥ás…¥'·¥õ  ô·¥á ü·¥è…¥…¢ ·¥õ·¥è ·¥Ä…¥ è ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ.\n\n·¥© ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢  è·¥è·¥ú Ä s·¥áss…™·¥è…¥ ·¥Ä…¢·¥Ä…™…¥.", reply_markup=InlineKeyboardMarkup(gen_button))
        return
    
    phone_code_msg = None
        
    phone_code_msg = await bot.ask(identifier=(msg.chat.id, user_id, None),
    text="¬ª ·¥© ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö ·¥õ ú·¥á **·¥è·¥õ·¥©** ·¥õ ú·¥Ä·¥õ  è·¥è·¥ú'·¥†·¥á  Ä·¥á·¥Ñ·¥á…™·¥†·¥á·¥Ö “ì Ä·¥è·¥ç ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥è…¥  è·¥è·¥ú Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ.\n…™“ì ·¥è·¥õ·¥© …™s `12345`, **·¥© ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö …™·¥õ ·¥Äs** `1 2 3 4 5`.")
    phone_code = phone_code_msg.text.replace(" ", "")
    try:
        await client.sign_in(phone_number, code.phone_code_hash, phone_code)
    except (PhoneCodeInvalid, PhoneCodeInvalidError, PhoneCodeInvalid1):
        await msg.reply("¬ª ·¥õ ú·¥á ·¥è·¥õ·¥©  è·¥è·¥ú'·¥†·¥á s·¥á…¥·¥õ …™s **·¥° Ä·¥è…¥…¢.**\n\n·¥© ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢  è·¥è·¥ú Ä s·¥áss…™·¥è…¥ ·¥Ä…¢·¥Ä…™…¥.", reply_markup=InlineKeyboardMarkup(gen_button))
        return
    except (PhoneCodeExpired, PhoneCodeExpiredError, PhoneCodeExpired1):
        await msg.reply("¬ª ·¥õ ú·¥á ·¥è·¥õ·¥©  è·¥è·¥ú'·¥†·¥á s·¥á…¥·¥õ …™s **·¥áx·¥ò…™ Ä·¥á·¥Ö.**\n\n·¥© ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢  è·¥è·¥ú Ä s·¥áss…™·¥è…¥ ·¥Ä…¢·¥Ä…™…¥.", reply_markup=InlineKeyboardMarkup(gen_button))
        return
    except (SessionPasswordNeeded, SessionPasswordNeededError, SessionPasswordNeeded1):
            try:
                two_step_msg = await bot.ask(identifier=(msg.chat.id, user_id, None),
                                             text="¬ª ·¥© ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä  è·¥è·¥ú Ä **·¥õ·¥°·¥è s·¥õ·¥á·¥© ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥** ·¥©·¥Äss·¥°·¥è Ä·¥Ö ·¥õ·¥è ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥á.")
            except TimeoutError:
                await msg.reply("¬ª ·¥õ…™·¥ç·¥á  ü…™·¥ç…™·¥õ  Ä·¥á·¥Ä·¥Ñ ú·¥á·¥Ö ·¥è“ì 5 ·¥ç…™…¥·¥ú·¥õ·¥ás.\n\n·¥© ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢  è·¥è·¥ú Ä s·¥áss…™·¥è…¥ ·¥Ä…¢·¥Ä…™…¥.", reply_markup=InlineKeyboardMarkup(gen_button))
                return
            try:
                password = two_step_msg.text
                await client.check_password(password=password)
                
            except (PasswordHashInvalid, PasswordHashInvalidError, PasswordHashInvalid1):
                await two_step_msg.reply("¬ª ·¥õ ú·¥á ·¥©·¥Äss·¥°·¥è Ä·¥Ö  è·¥è·¥ú'·¥†·¥á s·¥á…¥·¥õ …™s ·¥° Ä·¥è…¥…¢.\n\n·¥© ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢  è·¥è·¥ú Ä s·¥áss…™·¥è…¥ ·¥Ä…¢·¥Ä…™…¥.", quote=True, reply_markup=InlineKeyboardMarkup(gen_button))
                return
    await client.sign_in(phone_number, code.phone_code_hash, phone_code)
    string_session = await client.export_session_string()
    text = f"**·¥õ ú…™s …™s  è·¥è·¥ú Ä {ty} s·¥õ Ä…™…¥…¢ s·¥áss…™·¥è…¥** \n\n`{string_session}` \n\n**…¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á·¥Ö  ô è :** @AM_YTBott\nüçí **…¥·¥è·¥õ·¥á :** ·¥Ö·¥è…¥'·¥õ s ú·¥Ä Ä·¥á …™·¥õ ·¥°…™·¥õ ú  è·¥è·¥ú Ä …¢…™ Ä ü“ì Ä…™·¥á…¥·¥Ö üçë ·¥Ä…¥·¥Ö ·¥Ö·¥è…¥'·¥õ “ì·¥è Ä…¢·¥á·¥õ ·¥õ·¥è ·¥ä·¥è…™…¥ @AmBotYT ü•∫"
    
    await bot.send_message(msg.chat.id, text)
    await client.disconnect()
